---
description:
globs:
alwaysApply: false
---
# 技术栈指南

根据PRD文档，项目采用以下技术栈进行开发：

## 前端技术栈

### 核心框架
- **Next.js 14+**: 使用App Router架构
- **React 18**: 函数式组件和Hooks
- **TypeScript**: 强类型支持

### UI与样式
- **Tailwind CSS**: 原子化CSS框架
- **Shadcn UI**: 基于Tailwind的组件库
  - 安装指南: `npx shadcn-ui@latest init`
  - 组件文档: [shadcn/ui](https://ui.shadcn.com/)
- **Lucide Icons**: 图标库
  - 安装: `npm install lucide-react`

### 状态管理与数据获取
- **Zustand**: 轻量级状态管理
  - 安装: `npm install zustand`
- **React Query**: 数据获取与缓存
  - 安装: `npm install @tanstack/react-query`
- **SWR**: 用于实时数据更新
  - 安装: `npm install swr`

### 表单处理
- **React Hook Form**: 表单状态管理
  - 安装: `npm install react-hook-form`
- **Zod**: 验证库
  - 安装: `npm install zod`
- **@hookform/resolvers**: Zod集成
  - 安装: `npm install @hookform/resolvers`

## 后端技术栈

### 数据库
- **PostgreSQL**: 关系型数据库
- **Drizzle ORM**: TypeScript优先的ORM
  - 安装: `npm install drizzle-orm pg`
  - 开发工具: `npm install -D drizzle-kit`

### 认证与安全
- **NextAuth.js**: 认证框架
  - 安装: `npm install next-auth`
- **bcrypt**: 密码哈希
  - 安装: `npm install bcrypt @types/bcrypt`
- **jsonwebtoken**: JWT处理
  - 安装: `npm install jsonwebtoken @types/jsonwebtoken`

### AI集成
- **OpenAI SDK**: OpenAI API客户端
  - 安装: `npm install openai`
- **LangChain.js**: LLM应用框架
  - 安装: `npm install @langchain/core @langchain/openai`

## 开发工具

- **ESLint**: 代码检查
- **Prettier**: 代码格式化
  - 安装: `npm install -D prettier`
- **Husky**: Git钩子
  - 安装: `npm install -D husky lint-staged`

## 应用依赖安装命令

```bash
# 创建Next.js项目
npx create-next-app@latest zkyh-web --typescript --tailwind --eslint --app

# 安装UI依赖
npm install lucide-react
npx shadcn-ui@latest init

# 状态管理和数据获取
npm install zustand @tanstack/react-query swr

# 表单处理
npm install react-hook-form zod @hookform/resolvers

# 数据库相关
npm install drizzle-orm pg
npm install -D drizzle-kit @types/pg

# 认证与安全
npm install next-auth bcrypt jsonwebtoken
npm install -D @types/bcrypt @types/jsonwebtoken

# AI集成
npm install openai @langchain/core @langchain/openai

# 开发工具
npm install -D prettier husky lint-staged
```

## 常用库组件使用示例

### Zustand状态管理

```typescript
// src/store/use-auth-store.ts
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

type User = {
  id: string;
  username: string;
  profession: string;
};

interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  setUser: (user: User | null) => void;
  logout: () => void;
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set) => ({
      user: null,
      isAuthenticated: false,
      setUser: (user) => set({ user, isAuthenticated: !!user }),
      logout: () => set({ user: null, isAuthenticated: false }),
    }),
    {
      name: 'auth-storage',
    }
  )
);
```

### React Query示例

```typescript
// src/hooks/use-study-plan.ts
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';

export function useStudyPlan(planId: string) {
  return useQuery({
    queryKey: ['study-plan', planId],
    queryFn: async () => {
      const response = await fetch(`/api/study-plans/${planId}`);
      if (!response.ok) {
        throw new Error('Failed to fetch study plan');
      }
      return response.json();
    },
  });
}

export function useCreateStudyPlan() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: async (data: any) => {
      const response = await fetch('/api/study-plans', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      
      if (!response.ok) {
        throw new Error('Failed to create study plan');
      }
      
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['study-plans'] });
    },
  });
}
```

### React Hook Form与Zod

```tsx
// src/components/auth/register-form.tsx
'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';

const formSchema = z.object({
  username: z.string().min(3, '用户名至少3个字符'),
  email: z.string().email('请输入有效的邮箱地址'),
  password: z.string().min(8, '密码至少8个字符'),
});

type FormValues = z.infer<typeof formSchema>;

export function RegisterForm() {
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: '',
      email: '',
      password: '',
    },
  });
  
  const onSubmit = async (data: FormValues) => {
    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      
      if (!response.ok) {
        throw new Error('注册失败');
      }
      
      // 处理成功响应
    } catch (error) {
      console.error('注册错误:', error);
    }
  };
  
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>用户名</FormLabel>
              <FormControl>
                <Input placeholder="请输入用户名" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>邮箱</FormLabel>
              <FormControl>
                <Input type="email" placeholder="请输入邮箱" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <FormField
          control={form.control}
          name="password"
          render={({ field }) => (
            <FormItem>
              <FormLabel>密码</FormLabel>
              <FormControl>
                <Input type="password" placeholder="请输入密码" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <Button type="submit" className="w-full">注册</Button>
      </form>
    </Form>
  );
}
```
