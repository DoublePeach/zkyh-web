---
description: 
globs: 
alwaysApply: false
---
# API路由设计

项目使用Next.js App Router的API路由功能实现后端接口。以下是基于PRD的API接口规范。

## 认证相关API

```typescript
// src/app/api/auth/register/route.ts
// POST /api/auth/register - 用户注册
import { NextResponse } from 'next/server';
import { db } from '@/db';
import { users } from '@/db/schema';
import { hash } from 'bcrypt';
import { z } from 'zod';

const registerSchema = z.object({
  username: z.string().min(3).max(50),
  password: z.string().min(8),
  profession: z.enum(['medical', 'nursing', 'pharmacy']),
  currentTitle: z.string(),
  targetTitle: z.string(),
});

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { username, password, profession, currentTitle, targetTitle } = registerSchema.parse(body);
    
    // 检查用户名是否已存在
    const existingUser = await db.query.users.findFirst({
      where: (users, { eq }) => eq(users.username, username)
    });
    
    if (existingUser) {
      return NextResponse.json(
        { error: '用户名已存在' },
        { status: 400 }
      );
    }
    
    // 密码哈希
    const passwordHash = await hash(password, 10);
    
    // 创建新用户
    const newUser = await db.insert(users).values({
      username,
      passwordHash,
      profession,
      currentTitle,
      targetTitle,
    }).returning();
    
    return NextResponse.json(
      { 
        id: newUser[0].id,
        username: newUser[0].username,
        profession: newUser[0].profession,
      }, 
      { status: 201 }
    );
  } catch (error) {
    console.error('注册失败:', error);
    return NextResponse.json(
      { error: '注册失败' },
      { status: 500 }
    );
  }
}
```

```typescript
// src/app/api/auth/login/route.ts
// POST /api/auth/login - 用户登录
// 实现JWT验证和cookie设置
```

```typescript
// src/app/api/auth/me/route.ts
// GET /api/auth/me - 获取当前用户信息
// 需要身份验证中间件
```

## 学习计划相关API

```typescript
// src/app/api/study-plans/route.ts
// POST /api/study-plans - 创建学习计划
// GET /api/study-plans - 获取用户所有学习计划
```

```typescript
// src/app/api/study-plans/[id]/route.ts
// GET /api/study-plans/:id - 获取特定计划详情
// PATCH /api/study-plans/:id - 更新学习计划
// DELETE /api/study-plans/:id - 删除学习计划
```

```typescript
// src/app/api/study-plans/[id]/modules/route.ts
// GET /api/study-plans/:id/modules - 获取计划的所有学习模块
```

```typescript
// src/app/api/study-plans/[id]/today/route.ts
// GET /api/study-plans/:id/today - 获取今日学习任务
```

## 学习内容相关API

```typescript
// src/app/api/modules/[id]/route.ts
// GET /api/modules/:id - 获取特定模块详情
```

```typescript
// src/app/api/tasks/[id]/route.ts
// GET /api/tasks/:id - 获取特定任务详情
```

```typescript
// src/app/api/tasks/[id]/content/route.ts
// GET /api/tasks/:id/content - 获取学习内容
```

```typescript
// src/app/api/tasks/[id]/complete/route.ts
// PATCH /api/tasks/:id/complete - 标记任务完成
```

## 测验相关API

```typescript
// src/app/api/tasks/[id]/quiz/route.ts
// GET /api/tasks/:id/quiz - 获取任务相关的测验
```

```typescript
// src/app/api/quizzes/[id]/submit/route.ts
// POST /api/quizzes/:id/submit - 提交测验答案
```

```typescript
// src/app/api/quizzes/[id]/result/route.ts
// GET /api/quizzes/:id/result - 获取测验结果
```

## AI生成相关API

```typescript
// src/app/api/ai/generate-plan/route.ts
// POST /api/ai/generate-plan - 生成学习计划
// 接入OpenAI API
```

```typescript
// src/app/api/ai/analyze-progress/route.ts
// POST /api/ai/analyze-progress - 分析学习进度并提供建议
```

## API中间件

创建身份验证中间件来保护需要认证的API路由：

```typescript
// src/lib/auth/middleware.ts
import { NextRequest, NextResponse } from 'next/server';
import { verifyJWT } from '@/lib/auth/jwt';

export async function authMiddleware(
  req: NextRequest,
  handler: (req: NextRequest, userId: string) => Promise<NextResponse>
) {
  // 从cookie或Authorization头中获取token
  const token = req.cookies.get('token')?.value ||
    req.headers.get('Authorization')?.replace('Bearer ', '');
  
  if (!token) {
    return NextResponse.json({ error: '未授权' }, { status: 401 });
  }
  
  try {
    // 验证JWT
    const payload = await verifyJWT(token);
    if (!payload || !payload.userId) {
      return NextResponse.json({ error: '无效的认证' }, { status: 401 });
    }
    
    // 调用处理程序
    return handler(req, payload.userId);
  } catch (error) {
    console.error('认证失败:', error);
    return NextResponse.json({ error: '认证失败' }, { status: 401 });
  }
}
```
